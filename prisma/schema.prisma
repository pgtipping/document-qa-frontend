// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Using PostgreSQL as requested
  url      = env("DATABASE_URL")
}

model Document {
  id        String   @id @default(cuid()) // Unique identifier for the document record
  filename  String   // Original filename uploaded by the user
  s3Key     String   @unique // Unique key identifying the file in S3
  // Removed sessionId: String
  status    String   // Status of the document (e.g., 'active', 'deleted')
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Relation to User model
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // New relationships for quizzes
  quizzes Quiz[]

  // Removed @@index([sessionId])
  @@index([userId]) // Index for faster querying by user
}

// Quiz Models
model Quiz {
  id          String      @id @default(cuid())
  title       String      // Title of the quiz
  description String?     // Optional description
  difficulty  String?     // Optional difficulty level (easy, medium, hard)
  timeLimit   Int?        // Optional time limit in minutes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  questions   QuizQuestion[]
  results     QuizResult[]
  
  // User who created the quiz
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Document the quiz is based on
  documentId  String
  document    Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Quiz configuration
  isPublic    Boolean     @default(false) // Whether quiz is public or private
  shareCode   String?     @unique // Optional code for sharing
  
  @@index([userId])
  @@index([documentId])
}

model QuizQuestion {
  id          String    @id @default(cuid())
  questionText String    @db.Text // The actual question
  answerType  String    // Type of answer (multiple_choice, true_false, short_answer, etc.)
  options     Json?     // For multiple choice, contains options as JSON array
  correctAnswer String   @db.Text // The correct answer
  points      Int       @default(1) // Points for this question
  difficulty  String    @default("medium") // Difficulty level (easy, medium, hard)
  explanation String?   @db.Text // Optional explanation of the answer
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  responses   QuizResponse[]
  
  @@index([quizId])
}

model QuizResponse {
  id          String      @id @default(cuid())
  userAnswer  String      @db.Text // The user's answer to the question
  isCorrect   Boolean?    // Whether the answer is correct (null if not graded yet)
  createdAt   DateTime    @default(now())
  
  // Relations
  questionId  String
  question    QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  resultId    String
  result      QuizResult   @relation(fields: [resultId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
  @@index([resultId])
}

model QuizResult {
  id          String        @id @default(cuid())
  score       Float         // Score as percentage
  totalPoints Int           // Total possible points
  earnedPoints Int          // Points earned
  feedback    String?       @db.Text // Overall feedback
  timeTaken   Int?          // Time taken in seconds
  completedAt DateTime      @default(now())
  
  // Relations
  quizId      String
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   QuizResponse[]
  
  // Sharing
  isShared    Boolean       @default(false)
  shareUrl    String?       @unique
  
  @@index([quizId])
  @@index([userId])
}

// NextAuth.js Models (added previously)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Index for faster querying by user
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster querying by user
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added field to store hashed password for credentials login
  accounts      Account[]
  sessions      Session[]
  documents     Document[] // Relation back to documents owned by the user
  performanceLogs PerformanceLog[] // Relation back to performance logs generated by the user
  quizzes       Quiz[]     // Quizzes created by the user
  quizResults   QuizResult[] // Quiz results for this user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PerformanceLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String   // User who made the request
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  mode        String // 'user' or 'model'
  question    String? @db.Text // The question asked (or generated)
  documentIds String[] // IDs of documents used for context

  // Timings (in seconds) - Storing key timings directly
  embeddingTime     Float?
  vectorSearchTime  Float?
  llmCompletionTime Float?
  docProcessingTime Float? // e.g., for initial content fetch in 'model' mode
  totalTime         Float // Total time for the /api/ask request execution

  // Detailed Timings (JSON blobs matching frontend structure for flexibility)
  // These will store arrays like: [{ name: string, value: number, percentage: number }]
  llmTimingBreakdown Json?
  docTimingBreakdown Json?

  // Document Metrics (Store as JSON for now, structure needs clarification)
  // Expected structure might be: { size_kb, total_chunks, selected_chunks, chunk_size, context_length }
  docMetricsJson Json?

  @@index([userId])
  @@index([timestamp])
}
