// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Using PostgreSQL as requested
  url      = env("DATABASE_URL")
}

model Document {
  id        String   @id @default(cuid()) // Unique identifier for the document record
  filename  String   // Original filename uploaded by the user
  s3Key     String   @unique // Unique key identifying the file in S3
  // Removed sessionId: String
  status    String   // Status of the document (e.g., 'active', 'deleted')
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Relation to User model
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Removed @@index([sessionId])
  @@index([userId]) // Index for faster querying by user
}

// NextAuth.js Models (added previously)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Index for faster querying by user
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster querying by user
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added field to store hashed password for credentials login
  accounts      Account[]
  sessions      Session[]
  documents     Document[] // Relation back to documents owned by the user
  performanceLogs PerformanceLog[] // Relation back to performance logs generated by the user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PerformanceLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String   // User who made the request
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  mode        String // 'user' or 'model'
  question    String? @db.Text // The question asked (or generated)
  documentIds String[] // IDs of documents used for context

  // Timings (in seconds) - Storing key timings directly
  embeddingTime     Float?
  vectorSearchTime  Float?
  llmCompletionTime Float?
  docProcessingTime Float? // e.g., for initial content fetch in 'model' mode
  totalTime         Float // Total time for the /api/ask request execution

  // Detailed Timings (JSON blobs matching frontend structure for flexibility)
  // These will store arrays like: [{ name: string, value: number, percentage: number }]
  llmTimingBreakdown Json?
  docTimingBreakdown Json?

  // Document Metrics (Store as JSON for now, structure needs clarification)
  // Expected structure might be: { size_kb, total_chunks, selected_chunks, chunk_size, context_length }
  docMetricsJson Json?

  @@index([userId])
  @@index([timestamp])
}
